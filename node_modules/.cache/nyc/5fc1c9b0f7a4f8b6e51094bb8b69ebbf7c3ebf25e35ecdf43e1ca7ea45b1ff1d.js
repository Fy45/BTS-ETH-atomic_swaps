var cov_2qyf8dhmhg=function(){var path="/Users/fanyuan/KTH-ICT-TCOMM/Thesis/Analysis/BTS-ETH-atomic_swaps/src/btsForEth.js";var hash="cfa1935b110d86342cf03fe93804d335b9c935b9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/fanyuan/KTH-ICT-TCOMM/Thesis/Analysis/BTS-ETH-atomic_swaps/src/btsForEth.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:40}},"1":{start:{line:2,column:12},end:{line:2,column:28}},"2":{start:{line:3,column:12},end:{line:3,column:28}},"3":{start:{line:4,column:15},end:{line:4,column:41}},"4":{start:{line:5,column:13},end:{line:5,column:28}},"5":{start:{line:9,column:18},end:{line:9,column:68}},"6":{start:{line:10,column:21},end:{line:10,column:74}},"7":{start:{line:11,column:14},end:{line:11,column:56}},"8":{start:{line:12,column:2},end:{line:14,column:4}},"9":{start:{line:15,column:15},end:{line:15,column:70}},"10":{start:{line:16,column:18},end:{line:18,column:3}},"11":{start:{line:24,column:2},end:{line:24,column:28}},"12":{start:{line:25,column:18},end:{line:25,column:37}},"13":{start:{line:26,column:2},end:{line:26,column:30}},"14":{start:{line:27,column:20},end:{line:34,column:3}},"15":{start:{line:35,column:2},end:{line:35,column:60}},"16":{start:{line:36,column:2},end:{line:38,column:4}},"17":{start:{line:39,column:2},end:{line:39,column:46}},"18":{start:{line:53,column:17},end:{line:53,column:110}},"19":{start:{line:54,column:16},end:{line:54,column:71}},"20":{start:{line:55,column:11},end:{line:55,column:74}},"21":{start:{line:56,column:23},end:{line:56,column:66}},"22":{start:{line:57,column:2},end:{line:57,column:61}},"23":{start:{line:62,column:20},end:{line:62,column:59}},"24":{start:{line:63,column:2},end:{line:63,column:29}},"25":{start:{line:64,column:24},end:{line:64,column:74}},"26":{start:{line:65,column:2},end:{line:67,column:3}},"27":{start:{line:66,column:4},end:{line:66,column:31}},"28":{start:{line:74,column:2},end:{line:76,column:4}},"29":{start:{line:77,column:15},end:{line:77,column:33}},"30":{start:{line:78,column:2},end:{line:94,column:3}},"31":{start:{line:80,column:6},end:{line:80,column:43}},"32":{start:{line:81,column:22},end:{line:87,column:7}},"33":{start:{line:88,column:6},end:{line:88,column:73}},"34":{start:{line:89,column:6},end:{line:89,column:76}},"35":{start:{line:90,column:6},end:{line:90,column:12}},"36":{start:{line:92,column:6},end:{line:92,column:32}},"37":{start:{line:93,column:6},end:{line:93,column:12}},"38":{start:{line:97,column:0},end:{line:97,column:27}}},fnMap:{"0":{name:"btsForEth",decl:{start:{line:7,column:15},end:{line:7,column:24}},loc:{start:{line:7,column:27},end:{line:95,column:1}},line:7}},branchMap:{"0":{loc:{start:{line:65,column:2},end:{line:67,column:3}},type:"if",locations:[{start:{line:65,column:2},end:{line:67,column:3}},{start:{line:65,column:2},end:{line:67,column:3}}],line:65},"1":{loc:{start:{line:78,column:2},end:{line:94,column:3}},type:"switch",locations:[{start:{line:79,column:4},end:{line:90,column:12}},{start:{line:91,column:4},end:{line:93,column:12}}],line:78}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"cfa1935b110d86342cf03fe93804d335b9c935b9"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const hash=(cov_2qyf8dhmhg.s[0]++,require("bitsharesjs").hash);const bts=(cov_2qyf8dhmhg.s[1]++,require("./bts"));const eth=(cov_2qyf8dhmhg.s[2]++,require("./eth"));const prompt=(cov_2qyf8dhmhg.s[3]++,require("./helper/prompt"));const web3=(cov_2qyf8dhmhg.s[4]++,require("web3"));async function btsForEth(){cov_2qyf8dhmhg.f[0]++;// configure the BTS party (both side)
let btsSender=(cov_2qyf8dhmhg.s[5]++,await prompt("Enter BTS account name of sender: "));let btsRecipient=(cov_2qyf8dhmhg.s[6]++,await prompt("Enter BTS account name of recipient: "));let value=(cov_2qyf8dhmhg.s[7]++,await prompt("Enter BTS amount to send: "));cov_2qyf8dhmhg.s[8]++;console.log("To log contract uniformly, \nwe highly recommended generating secret should be no shorter than 32!");let secret=(cov_2qyf8dhmhg.s[9]++,await prompt("Enter the preimage value you generate: "));let time_lock=(cov_2qyf8dhmhg.s[10]++,await prompt("Enter the time you want to lock in contract (seconds): "));/*
   * selling BTS buying ETH,
   * generate the htlc contract on BTS side
   */cov_2qyf8dhmhg.s[11]++;value=parseFloat(value);let hash_lock=(cov_2qyf8dhmhg.s[12]++,hash.sha256(secret));cov_2qyf8dhmhg.s[13]++;console.log("Deploying...");const btsHtlcid=(cov_2qyf8dhmhg.s[14]++,await bts.deployHTLC(btsSender,btsRecipient,hash_lock,value,time_lock,secret));cov_2qyf8dhmhg.s[15]++;hash_lock="0x"+Buffer.from(hash_lock).toString("hex");cov_2qyf8dhmhg.s[16]++;console.log(`Please inform your counterparty with the hash value: ${hash_lock}`);cov_2qyf8dhmhg.s[17]++;console.log(`and BTS HTLC id ${btsHtlcid}`);/*
   * configure the ETH party(receiver)
   * the comment code is use for other user,
   * since it involves important values in MetaMask wallet
   * for now it's only test locally
   */ //let mnemonic = await prompt('Enter the secret mnemonics to get access to your metamask wallet: ')
//let api_key = await prompt('Also specify your ropsten infrua api_key: ')
//const ethRecipient = eth.connectAcc(mnemonic, api_key, id)
let mnemonic=(cov_2qyf8dhmhg.s[18]++,await prompt('Enter the secret mnemonics (12 words) to get access to your metamask wallet: '));let api_key=(cov_2qyf8dhmhg.s[19]++,await prompt('Also specify your environment api_key: '));let id=(cov_2qyf8dhmhg.s[20]++,await prompt("Enter your recipient account id of ETH wallet: "));const ethRecipient=(cov_2qyf8dhmhg.s[21]++,await eth.connectAcc(mnemonic,api_key,id));cov_2qyf8dhmhg.s[22]++;console.log(`Ropsten ETH wallet address: ${ethRecipient}`);/*
   * Verify the contract
   */const ethHtlcId=(cov_2qyf8dhmhg.s[23]++,await prompt("Enter the ETH HTLC id: "));cov_2qyf8dhmhg.s[24]++;console.log("\nETH HTLC:");const ethHashSecret=(cov_2qyf8dhmhg.s[25]++,await eth.verifyHTLC(mnemonic,api_key,ethHtlcId));cov_2qyf8dhmhg.s[26]++;if(hash_lock!==ethHashSecret){cov_2qyf8dhmhg.b[0][0]++;cov_2qyf8dhmhg.s[27]++;throw"Hashes don't match";}else{cov_2qyf8dhmhg.b[0][1]++;}/*
   * Redeem the BTS contract
   * or refund ETH after time expires
   * transaction complete
   */cov_2qyf8dhmhg.s[28]++;console.log(`Enter yes if you want to redeem the agreed amount of ETH from contract: \n${ethHtlcId} \nOr enter exit if you want to quit: `);let answer=(cov_2qyf8dhmhg.s[29]++,await prompt("> "));cov_2qyf8dhmhg.s[30]++;switch(answer){case"yes":cov_2qyf8dhmhg.b[1][0]++;cov_2qyf8dhmhg.s[31]++;console.log("Resolving ETH HTLC...");const balance=(cov_2qyf8dhmhg.s[32]++,await eth.resolveHTLC(mnemonic,api_key,ethRecipient,ethHtlcId,web3.utils.asciiToHex(secret)));cov_2qyf8dhmhg.s[33]++;console.log("ETH HashTimelockContract was successfully redeemed!");cov_2qyf8dhmhg.s[34]++;console.log(`Account: ${ethRecipient} has balance of ${balance} ETH`);cov_2qyf8dhmhg.s[35]++;break;case"exit":cov_2qyf8dhmhg.b[1][1]++;cov_2qyf8dhmhg.s[36]++;console.log("Exiting...");cov_2qyf8dhmhg.s[37]++;break;}}cov_2qyf8dhmhg.s[38]++;module.exports=btsForEth;