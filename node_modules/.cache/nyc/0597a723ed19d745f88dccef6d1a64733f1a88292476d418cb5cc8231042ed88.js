var cov_us0pfom87=function(){var path="/Users/fanyuan/KTH-ICT-TCOMM/Thesis/Analysis/BTS-ETH-atomic_swaps/src/eth.js";var hash="ab91a140530d2c1d5423c74f2682e5c2fbdc05a3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/fanyuan/KTH-ICT-TCOMM/Thesis/Analysis/BTS-ETH-atomic_swaps/src/eth.js",statementMap:{"0":{start:{line:1,column:12},end:{line:1,column:27}},"1":{start:{line:2,column:13},end:{line:2,column:28}},"2":{start:{line:3,column:15},end:{line:3,column:32}},"3":{start:{line:4,column:22},end:{line:4,column:48}},"4":{start:{line:5,column:23},end:{line:5,column:63}},"5":{start:{line:6,column:25},end:{line:6,column:61}},"6":{start:{line:7,column:17},end:{line:7,column:61}},"7":{start:{line:8,column:30},end:{line:8,column:74}},"8":{start:{line:20,column:29},end:{line:20,column:37}},"9":{start:{line:21,column:19},end:{line:21,column:75}},"10":{start:{line:22,column:15},end:{line:22,column:32}},"11":{start:{line:23,column:16},end:{line:23,column:44}},"12":{start:{line:24,column:18},end:{line:24,column:29}},"13":{start:{line:25,column:2},end:{line:25,column:17}},"14":{start:{line:28,column:15},end:{line:32,column:13}},"15":{start:{line:29,column:2},end:{line:32,column:13}},"16":{start:{line:33,column:21},end:{line:33,column:74}},"17":{start:{line:33,column:34},end:{line:33,column:74}},"18":{start:{line:34,column:21},end:{line:34,column:68}},"19":{start:{line:34,column:34},end:{line:34,column:68}},"20":{start:{line:35,column:19},end:{line:35,column:54}},"21":{start:{line:35,column:25},end:{line:35,column:54}},"22":{start:{line:36,column:21},end:{line:36,column:65}},"23":{start:{line:36,column:32},end:{line:36,column:65}},"24":{start:{line:47,column:29},end:{line:47,column:37}},"25":{start:{line:48,column:19},end:{line:48,column:75}},"26":{start:{line:49,column:15},end:{line:49,column:32}},"27":{start:{line:50,column:15},end:{line:50,column:69}},"28":{start:{line:51,column:2},end:{line:51,column:30}},"29":{start:{line:53,column:19},end:{line:53,column:53}},"30":{start:{line:62,column:18},end:{line:62,column:62}},"31":{start:{line:64,column:20},end:{line:70,column:6}},"32":{start:{line:72,column:18},end:{line:72,column:41}},"33":{start:{line:73,column:21},end:{line:73,column:39}},"34":{start:{line:74,column:2},end:{line:74,column:35}},"35":{start:{line:76,column:2},end:{line:76,column:39}},"36":{start:{line:77,column:2},end:{line:77,column:44}},"37":{start:{line:78,column:2},end:{line:78,column:43}},"38":{start:{line:79,column:2},end:{line:79,column:39}},"39":{start:{line:80,column:2},end:{line:80,column:43}},"40":{start:{line:82,column:22},end:{line:82,column:71}},"41":{start:{line:83,column:19},end:{line:83,column:46}},"42":{start:{line:84,column:2},end:{line:84,column:40}},"43":{start:{line:85,column:2},end:{line:85,column:45}},"44":{start:{line:86,column:2},end:{line:86,column:44}},"45":{start:{line:87,column:2},end:{line:87,column:40}},"46":{start:{line:88,column:2},end:{line:88,column:52}},"47":{start:{line:89,column:2},end:{line:89,column:37}},"48":{start:{line:90,column:2},end:{line:90,column:36}},"49":{start:{line:91,column:2},end:{line:94,column:4}},"50":{start:{line:96,column:2},end:{line:96,column:68}},"51":{start:{line:97,column:2},end:{line:97,column:20}},"52":{start:{line:101,column:29},end:{line:101,column:37}},"53":{start:{line:102,column:19},end:{line:102,column:75}},"54":{start:{line:103,column:15},end:{line:103,column:32}},"55":{start:{line:104,column:15},end:{line:104,column:69}},"56":{start:{line:106,column:22},end:{line:106,column:71}},"57":{start:{line:107,column:19},end:{line:107,column:46}},"58":{start:{line:109,column:21},end:{line:109,column:38}},"59":{start:{line:110,column:19},end:{line:110,column:36}},"60":{start:{line:111,column:17},end:{line:111,column:32}},"61":{start:{line:112,column:19},end:{line:112,column:44}},"62":{start:{line:113,column:2},end:{line:113,column:43}},"63":{start:{line:114,column:2},end:{line:114,column:54}},"64":{start:{line:115,column:2},end:{line:115,column:47}},"65":{start:{line:116,column:2},end:{line:116,column:49}},"66":{start:{line:117,column:2},end:{line:117,column:49}},"67":{start:{line:118,column:2},end:{line:123,column:4}},"68":{start:{line:125,column:2},end:{line:125,column:20}},"69":{start:{line:129,column:29},end:{line:129,column:37}},"70":{start:{line:130,column:19},end:{line:130,column:75}},"71":{start:{line:131,column:15},end:{line:131,column:32}},"72":{start:{line:132,column:15},end:{line:132,column:69}},"73":{start:{line:134,column:20},end:{line:134,column:69}},"74":{start:{line:135,column:17},end:{line:135,column:44}},"75":{start:{line:137,column:21},end:{line:137,column:38}},"76":{start:{line:138,column:19},end:{line:138,column:36}},"77":{start:{line:139,column:17},end:{line:139,column:49}},"78":{start:{line:140,column:19},end:{line:140,column:44}},"79":{start:{line:141,column:2},end:{line:141,column:41}},"80":{start:{line:142,column:21},end:{line:143,column:55}},"81":{start:{line:143,column:4},end:{line:143,column:55}},"82":{start:{line:144,column:16},end:{line:145,column:49}},"83":{start:{line:145,column:4},end:{line:145,column:49}},"84":{start:{line:147,column:19},end:{line:147,column:56}},"85":{start:{line:148,column:27},end:{line:148,column:71}},"86":{start:{line:160,column:32},end:{line:160,column:58}},"87":{start:{line:161,column:21},end:{line:163,column:43}},"88":{start:{line:164,column:13},end:{line:164,column:70}},"89":{start:{line:168,column:26},end:{line:170,column:40}},"90":{start:{line:171,column:2},end:{line:175,column:4}},"91":{start:{line:178,column:2},end:{line:178,column:66}},"92":{start:{line:179,column:2},end:{line:179,column:41}},"93":{start:{line:180,column:2},end:{line:180,column:36}},"94":{start:{line:181,column:2},end:{line:181,column:36}},"95":{start:{line:182,column:2},end:{line:182,column:42}},"96":{start:{line:184,column:22},end:{line:184,column:48}},"97":{start:{line:185,column:2},end:{line:185,column:61}},"98":{start:{line:187,column:2},end:{line:187,column:23}},"99":{start:{line:191,column:29},end:{line:191,column:37}},"100":{start:{line:192,column:19},end:{line:192,column:75}},"101":{start:{line:193,column:15},end:{line:193,column:32}},"102":{start:{line:194,column:15},end:{line:194,column:69}},"103":{start:{line:196,column:2},end:{line:215,column:5}},"104":{start:{line:197,column:17},end:{line:214,column:11}},"105":{start:{line:198,column:26},end:{line:198,column:75}},"106":{start:{line:199,column:23},end:{line:199,column:50}},"107":{start:{line:200,column:25},end:{line:200,column:50}},"108":{start:{line:201,column:21},end:{line:201,column:38}},"109":{start:{line:202,column:20},end:{line:202,column:53}},"110":{start:{line:203,column:6},end:{line:213,column:7}},"111":{start:{line:207,column:8},end:{line:207,column:28}},"112":{start:{line:208,column:8},end:{line:208,column:50}},"113":{start:{line:209,column:8},end:{line:209,column:27}},"114":{start:{line:210,column:13},end:{line:213,column:7}},"115":{start:{line:211,column:8},end:{line:211,column:28}},"116":{start:{line:212,column:8},end:{line:212,column:37}},"117":{start:{line:220,column:29},end:{line:220,column:37}},"118":{start:{line:221,column:19},end:{line:221,column:75}},"119":{start:{line:222,column:15},end:{line:222,column:32}},"120":{start:{line:223,column:15},end:{line:223,column:69}},"121":{start:{line:225,column:20},end:{line:225,column:69}},"122":{start:{line:226,column:17},end:{line:226,column:44}},"123":{start:{line:227,column:17},end:{line:227,column:49}},"124":{start:{line:228,column:19},end:{line:228,column:44}},"125":{start:{line:229,column:2},end:{line:231,column:3}},"126":{start:{line:230,column:4},end:{line:230,column:45}},"127":{start:{line:232,column:21},end:{line:233,column:55}},"128":{start:{line:233,column:4},end:{line:233,column:55}},"129":{start:{line:234,column:16},end:{line:235,column:49}},"130":{start:{line:235,column:4},end:{line:235,column:49}},"131":{start:{line:237,column:30},end:{line:237,column:54}},"132":{start:{line:238,column:19},end:{line:241,column:4}},"133":{start:{line:242,column:13},end:{line:242,column:68}},"134":{start:{line:243,column:26},end:{line:245,column:38}},"135":{start:{line:246,column:2},end:{line:250,column:4}},"136":{start:{line:251,column:2},end:{line:251,column:66}},"137":{start:{line:252,column:2},end:{line:252,column:41}},"138":{start:{line:253,column:2},end:{line:253,column:37}},"139":{start:{line:254,column:2},end:{line:254,column:35}},"140":{start:{line:256,column:22},end:{line:256,column:46}},"141":{start:{line:257,column:2},end:{line:257,column:61}},"142":{start:{line:258,column:2},end:{line:258,column:23}},"143":{start:{line:261,column:0},end:{line:268,column:2}}},fnMap:{"0":{name:"connectAcc",decl:{start:{line:19,column:15},end:{line:19,column:25}},loc:{start:{line:19,column:49},end:{line:26,column:1}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:15},end:{line:28,column:16}},loc:{start:{line:29,column:2},end:{line:32,column:13}},line:29},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:21},end:{line:33,column:22}},loc:{start:{line:33,column:34},end:{line:33,column:74}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:34,column:21},end:{line:34,column:22}},loc:{start:{line:34,column:34},end:{line:34,column:68}},line:34},"4":{name:"(anonymous_4)",decl:{start:{line:35,column:19},end:{line:35,column:20}},loc:{start:{line:35,column:25},end:{line:35,column:54}},line:35},"5":{name:"(anonymous_5)",decl:{start:{line:36,column:21},end:{line:36,column:22}},loc:{start:{line:36,column:32},end:{line:36,column:65}},line:36},"6":{name:"deployHTLC",decl:{start:{line:38,column:15},end:{line:38,column:25}},loc:{start:{line:46,column:2},end:{line:98,column:1}},line:46},"7":{name:"verifyHTLC",decl:{start:{line:100,column:15},end:{line:100,column:25}},loc:{start:{line:100,column:57},end:{line:126,column:1}},line:100},"8":{name:"resolveHTLC",decl:{start:{line:128,column:15},end:{line:128,column:26}},loc:{start:{line:128,column:76},end:{line:188,column:1}},line:128},"9":{name:"(anonymous_9)",decl:{start:{line:142,column:21},end:{line:142,column:22}},loc:{start:{line:143,column:4},end:{line:143,column:55}},line:143},"10":{name:"(anonymous_10)",decl:{start:{line:144,column:16},end:{line:144,column:17}},loc:{start:{line:145,column:4},end:{line:145,column:49}},line:145},"11":{name:"waitForHTLC",decl:{start:{line:190,column:15},end:{line:190,column:26}},loc:{start:{line:190,column:58},end:{line:216,column:1}},line:190},"12":{name:"(anonymous_12)",decl:{start:{line:196,column:21},end:{line:196,column:22}},loc:{start:{line:196,column:42},end:{line:215,column:3}},line:196},"13":{name:"(anonymous_13)",decl:{start:{line:197,column:29},end:{line:197,column:30}},loc:{start:{line:197,column:46},end:{line:214,column:5}},line:197},"14":{name:"refundHTLC",decl:{start:{line:218,column:15},end:{line:218,column:25}},loc:{start:{line:218,column:65},end:{line:259,column:1}},line:218},"15":{name:"(anonymous_15)",decl:{start:{line:232,column:21},end:{line:232,column:22}},loc:{start:{line:233,column:4},end:{line:233,column:55}},line:233},"16":{name:"(anonymous_16)",decl:{start:{line:234,column:16},end:{line:234,column:17}},loc:{start:{line:235,column:4},end:{line:235,column:49}},line:235}},branchMap:{"0":{loc:{start:{line:144,column:28},end:{line:144,column:54}},type:"default-arg",locations:[{start:{line:144,column:39},end:{line:144,column:54}}],line:144},"1":{loc:{start:{line:203,column:6},end:{line:213,column:7}},type:"if",locations:[{start:{line:203,column:6},end:{line:213,column:7}},{start:{line:203,column:6},end:{line:213,column:7}}],line:203},"2":{loc:{start:{line:210,column:13},end:{line:213,column:7}},type:"if",locations:[{start:{line:210,column:13},end:{line:213,column:7}},{start:{line:210,column:13},end:{line:213,column:7}}],line:210},"3":{loc:{start:{line:229,column:2},end:{line:231,column:3}},type:"if",locations:[{start:{line:229,column:2},end:{line:231,column:3}},{start:{line:229,column:2},end:{line:231,column:3}}],line:229},"4":{loc:{start:{line:234,column:28},end:{line:234,column:54}},type:"default-arg",locations:[{start:{line:234,column:39},end:{line:234,column:54}}],line:234}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"ab91a140530d2c1d5423c74f2682e5c2fbdc05a3"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const Eth=(cov_us0pfom87.s[0]++,require("web3"));const util=(cov_us0pfom87.s[1]++,require("util"));const crypto=(cov_us0pfom87.s[2]++,require("crypto"));const assertEqualBN=(cov_us0pfom87.s[3]++,require("./helper/assert"));const htlcArrayToObj=(cov_us0pfom87.s[4]++,require("./helper/utils").htlcArrayToObj);const HDWalletProvider=(cov_us0pfom87.s[5]++,require("truffle-hdwallet-provider"));const HTLC_abi=(cov_us0pfom87.s[6]++,require("../build/contracts/HashedTimelock"));const HTLC_contract_address=(cov_us0pfom87.s[7]++,"0x243785f6b65418191ea20b45fde7069ffe4f8cef");/*
 * the function connectAcc() aims to
 * connect to ropsten testnet using metamask account info
 * and get the send/receive account as desired
 * the first account id is 0
 * the commented line are meant for other users
 * till now is test only
 */async function connectAcc(mnemonic,api_key,id){cov_us0pfom87.f[0]++;const MY_SECRET_MNEMONIC=(cov_us0pfom87.s[8]++,mnemonic);const provider=(cov_us0pfom87.s[9]++,new HDWalletProvider(MY_SECRET_MNEMONIC,api_key,0,10));const web3=(cov_us0pfom87.s[10]++,new Eth(provider));let account=(cov_us0pfom87.s[11]++,await web3.eth.getAccounts());const address=(cov_us0pfom87.s[12]++,account[id]);cov_us0pfom87.s[13]++;return address;}cov_us0pfom87.s[14]++;const sha256=x=>{cov_us0pfom87.f[1]++;cov_us0pfom87.s[15]++;return crypto.createHash("sha256").update(x).digest();};cov_us0pfom87.s[16]++;const txLoggedArgs=txReceipt=>{cov_us0pfom87.f[2]++;cov_us0pfom87.s[17]++;return txReceipt.events.LogHTLCNew.returnValues;};cov_us0pfom87.s[18]++;const txContractId=txReceipt=>{cov_us0pfom87.f[3]++;cov_us0pfom87.s[19]++;return txLoggedArgs(txReceipt).contractId;};cov_us0pfom87.s[20]++;const nowSeconds=()=>{cov_us0pfom87.f[4]++;cov_us0pfom87.s[21]++;return Math.floor(Date.now()/1000);};cov_us0pfom87.s[22]++;const isSha256Hash=hashStr=>{cov_us0pfom87.f[5]++;cov_us0pfom87.s[23]++;return /^0x[0-9a-f]{64}$/i.test(hashStr);};async function deployHTLC(mnemonic,api_key,sender,recipient,hash,time_lock,amount){cov_us0pfom87.f[6]++;const MY_SECRET_MNEMONIC=(cov_us0pfom87.s[24]++,mnemonic);const provider=(cov_us0pfom87.s[25]++,new HDWalletProvider(MY_SECRET_MNEMONIC,api_key,0,10));const web3=(cov_us0pfom87.s[26]++,new Eth(provider));const htlc=(cov_us0pfom87.s[27]++,new web3.eth.Contract(HTLC_abi,HTLC_contract_address));cov_us0pfom87.s[28]++;console.log("Deploying...");const timeLock=(cov_us0pfom87.s[29]++,nowSeconds()+parseInt(time_lock));// if (amount == 0){
//   throw 'expected failure due to 0 value transferred'
// }
// if (timeLock == nowSeconds()-1){
//   throw 'expected failure due to past timelock'
// }
let amountWei=(cov_us0pfom87.s[30]++,web3.utils.toWei(amount.toString(),"ether"));const txReceipt=(cov_us0pfom87.s[31]++,await htlc.methods.newContract(recipient,hash,timeLock).send({from:sender,value:amountWei,gas:3000000}));const logArgs=(cov_us0pfom87.s[32]++,txLoggedArgs(txReceipt));const contractId=(cov_us0pfom87.s[33]++,logArgs.contractId);cov_us0pfom87.s[34]++;assert(isSha256Hash(contractId));cov_us0pfom87.s[35]++;assert.equal(logArgs.sender,sender);cov_us0pfom87.s[36]++;assert.equal(logArgs.receiver,recipient);cov_us0pfom87.s[37]++;assertEqualBN(logArgs.amount,amountWei);cov_us0pfom87.s[38]++;assert.equal(logArgs.hashlock,hash);cov_us0pfom87.s[39]++;assert.equal(logArgs.timelock,timeLock);const contractArr=(cov_us0pfom87.s[40]++,await htlc.methods.getContract(contractId).call());const contract=(cov_us0pfom87.s[41]++,htlcArrayToObj(contractArr));cov_us0pfom87.s[42]++;assert.equal(contract.sender,sender);cov_us0pfom87.s[43]++;assert.equal(contract.receiver,recipient);cov_us0pfom87.s[44]++;assertEqualBN(contract.amount,amountWei);cov_us0pfom87.s[45]++;assert.equal(contract.hashlock,hash);cov_us0pfom87.s[46]++;assert.equal(Number(contract.timelock),timeLock);cov_us0pfom87.s[47]++;assert.isFalse(contract.withdrawn);cov_us0pfom87.s[48]++;assert.isFalse(contract.refunded);cov_us0pfom87.s[49]++;assert.equal(contract.preimage,"0x0000000000000000000000000000000000000000000000000000000000000000");cov_us0pfom87.s[50]++;console.log("ETH HashTimelockContract was successfully created!");cov_us0pfom87.s[51]++;return contractId;}async function verifyHTLC(mnemonic,api_key,contractId){cov_us0pfom87.f[7]++;const MY_SECRET_MNEMONIC=(cov_us0pfom87.s[52]++,mnemonic);const provider=(cov_us0pfom87.s[53]++,new HDWalletProvider(MY_SECRET_MNEMONIC,api_key,0,10));const web3=(cov_us0pfom87.s[54]++,new Eth(provider));const htlc=(cov_us0pfom87.s[55]++,new web3.eth.Contract(HTLC_abi,HTLC_contract_address));const contractArr=(cov_us0pfom87.s[56]++,await htlc.methods.getContract(contractId).call());const contract=(cov_us0pfom87.s[57]++,htlcArrayToObj(contractArr));const hashSecret=(cov_us0pfom87.s[58]++,contract.hashlock);const Receiver=(cov_us0pfom87.s[59]++,contract.receiver);const Amount=(cov_us0pfom87.s[60]++,contract.amount);let unlockTime=(cov_us0pfom87.s[61]++,Number(contract.timelock));cov_us0pfom87.s[62]++;unlockTime=new Date(unlockTime*1000);cov_us0pfom87.s[63]++;console.log(`Sender          | ${contract.sender}`);cov_us0pfom87.s[64]++;console.log(`Reciever        | ${Receiver}`);cov_us0pfom87.s[65]++;console.log(`Transfer amount | ${Amount} Wei`);cov_us0pfom87.s[66]++;console.log(`Hash value      | ${hashSecret}`);cov_us0pfom87.s[67]++;console.log(`Unlock time     | ${unlockTime} (~ ${Math.max(0,Math.floor((Number(contract.timelock)-nowSeconds())/60))} mins)`);cov_us0pfom87.s[68]++;return hashSecret;}async function resolveHTLC(mnemonic,api_key,receiver,contractId,secret){cov_us0pfom87.f[8]++;const MY_SECRET_MNEMONIC=(cov_us0pfom87.s[69]++,mnemonic);const provider=(cov_us0pfom87.s[70]++,new HDWalletProvider(MY_SECRET_MNEMONIC,api_key,0,10));const web3=(cov_us0pfom87.s[71]++,new Eth(provider));const htlc=(cov_us0pfom87.s[72]++,new web3.eth.Contract(HTLC_abi,HTLC_contract_address));let contractArr=(cov_us0pfom87.s[73]++,await htlc.methods.getContract(contractId).call());let contract=(cov_us0pfom87.s[74]++,htlcArrayToObj(contractArr));const hashSecret=(cov_us0pfom87.s[75]++,contract.hashlock);const Receiver=(cov_us0pfom87.s[76]++,contract.receiver);const amount=(cov_us0pfom87.s[77]++,web3.utils.toBN(contract.amount));let unlockTime=(cov_us0pfom87.s[78]++,Number(contract.timelock));cov_us0pfom87.s[79]++;timelock=new Date(unlockTime*1000);cov_us0pfom87.s[80]++;const getBalance=async address=>{cov_us0pfom87.f[9]++;cov_us0pfom87.s[81]++;return web3.utils.toBN((await web3.eth.getBalance(address)));};cov_us0pfom87.s[82]++;const txGas=(txReceipt,gasPrice=(cov_us0pfom87.b[0][0]++,defaultGasPrice))=>{cov_us0pfom87.f[10]++;cov_us0pfom87.s[83]++;return web3.utils.toBN(txReceipt.gasUsed*gasPrice);};const hashlock=(cov_us0pfom87.s[84]++,sha256(web3.utils.hexToAscii(secret)));const hashlock_bytes32=(cov_us0pfom87.s[85]++,"0x"+Buffer.from(hashlock).toString("hex"));// if (hashlock_bytes32 != hashSecret){
//   throw 'expected failure due to wrong secret!'
// }
// if (receiver != Receiver){
//   throw 'expected failure due to wrong receiver'
// }
// if (Math.floor(timelock-Date.now()) <=0){
//   throw 'expected failure due to withdraw after timelock expired'
// }
const receiverBalanceBefore=(cov_us0pfom87.s[86]++,await getBalance(receiver));const withdrawTx=(cov_us0pfom87.s[87]++,await htlc.methods.withdraw(contractId,secret).send({from:receiver,gas:3000000}));const tx=(cov_us0pfom87.s[88]++,await web3.eth.getTransaction(withdrawTx.transactionHash));// Check contract funds are now at the receiver address
const expectedBalance=(cov_us0pfom87.s[89]++,receiverBalanceBefore.add(amount).sub(txGas(withdrawTx,tx.gasPrice)));cov_us0pfom87.s[90]++;assertEqualBN((await getBalance(receiver)),expectedBalance,"receiver balance doesn't match");// get contract once more with updated info
cov_us0pfom87.s[91]++;contractArr=await htlc.methods.getContract(contractId).call();cov_us0pfom87.s[92]++;contract=htlcArrayToObj(contractArr);cov_us0pfom87.s[93]++;assert.isTrue(contract.withdrawn);// withdrawn set
cov_us0pfom87.s[94]++;assert.isFalse(contract.refunded);// refunded still false
cov_us0pfom87.s[95]++;assert.equal(contract.preimage,secret);let actualBalance=(cov_us0pfom87.s[96]++,await getBalance(receiver));cov_us0pfom87.s[97]++;actualBalance=web3.utils.fromWei(actualBalance,"ether");cov_us0pfom87.s[98]++;return actualBalance;}async function waitForHTLC(mnemonic,api_key,contractId){cov_us0pfom87.f[11]++;const MY_SECRET_MNEMONIC=(cov_us0pfom87.s[99]++,mnemonic);const provider=(cov_us0pfom87.s[100]++,new HDWalletProvider(MY_SECRET_MNEMONIC,api_key,0,10));const web3=(cov_us0pfom87.s[101]++,new Eth(provider));const htlc=(cov_us0pfom87.s[102]++,new web3.eth.Contract(HTLC_abi,HTLC_contract_address));cov_us0pfom87.s[103]++;return new Promise((resolve,reject)=>{cov_us0pfom87.f[12]++;const poll=(cov_us0pfom87.s[104]++,setInterval(async function(){cov_us0pfom87.f[13]++;const contractArr=(cov_us0pfom87.s[105]++,await htlc.methods.getContract(contractId).call());const contract=(cov_us0pfom87.s[106]++,htlcArrayToObj(contractArr));const unlockTime=(cov_us0pfom87.s[107]++,Number(contract.timelock));const secret=(cov_us0pfom87.s[108]++,contract.preimage);const block=(cov_us0pfom87.s[109]++,await web3.eth.getBlock("latest"));cov_us0pfom87.s[110]++;if(secret!=="0x0000000000000000000000000000000000000000000000000000000000000000"){cov_us0pfom87.b[1][0]++;cov_us0pfom87.s[111]++;clearInterval(poll);cov_us0pfom87.s[112]++;btsSecret=web3.utils.hexToAscii(secret);cov_us0pfom87.s[113]++;resolve(btsSecret);}else{cov_us0pfom87.b[1][1]++;cov_us0pfom87.s[114]++;if(block.timestamp>unlockTime){cov_us0pfom87.b[2][0]++;cov_us0pfom87.s[115]++;clearInterval(poll);cov_us0pfom87.s[116]++;reject("ETH HTLC timed out");}else{cov_us0pfom87.b[2][1]++;}}},5e3));});}async function refundHTLC(mnemonic,api_key,sender,contractId){cov_us0pfom87.f[14]++;const MY_SECRET_MNEMONIC=(cov_us0pfom87.s[117]++,mnemonic);const provider=(cov_us0pfom87.s[118]++,new HDWalletProvider(MY_SECRET_MNEMONIC,api_key,0,10));const web3=(cov_us0pfom87.s[119]++,new Eth(provider));const htlc=(cov_us0pfom87.s[120]++,new web3.eth.Contract(HTLC_abi,HTLC_contract_address));let contractArr=(cov_us0pfom87.s[121]++,await htlc.methods.getContract(contractId).call());let contract=(cov_us0pfom87.s[122]++,htlcArrayToObj(contractArr));const amount=(cov_us0pfom87.s[123]++,web3.utils.toBN(contract.amount));const timelock=(cov_us0pfom87.s[124]++,Number(contract.timelock));cov_us0pfom87.s[125]++;if(nowSeconds()<timelock){cov_us0pfom87.b[3][0]++;cov_us0pfom87.s[126]++;throw"expected failure due to timelock";}else{cov_us0pfom87.b[3][1]++;}cov_us0pfom87.s[127]++;const getBalance=async address=>{cov_us0pfom87.f[15]++;cov_us0pfom87.s[128]++;return web3.utils.toBN((await web3.eth.getBalance(address)));};cov_us0pfom87.s[129]++;const txGas=(txReceipt,gasPrice=(cov_us0pfom87.b[4][0]++,defaultGasPrice))=>{cov_us0pfom87.f[16]++;cov_us0pfom87.s[130]++;return web3.utils.toBN(txReceipt.gasUsed*gasPrice);};const senderBalanceBefore=(cov_us0pfom87.s[131]++,await getBalance(sender));const refundTx=(cov_us0pfom87.s[132]++,await htlc.methods.refund(contractId).send({from:sender,gas:3000000}));const tx=(cov_us0pfom87.s[133]++,await web3.eth.getTransaction(refundTx.transactionHash));const expectedBalance=(cov_us0pfom87.s[134]++,senderBalanceBefore.add(amount).sub(txGas(refundTx,tx.gasPrice)));cov_us0pfom87.s[135]++;assertEqualBN((await getBalance(sender)),expectedBalance,"sender balance doesn't match");cov_us0pfom87.s[136]++;contractArr=await htlc.methods.getContract(contractId).call();cov_us0pfom87.s[137]++;contract=htlcArrayToObj(contractArr);cov_us0pfom87.s[138]++;assert.isFalse(contract.withdrawn);// withdrawn still false
cov_us0pfom87.s[139]++;assert.isTrue(contract.refunded);// refunded set
let actualBalance=(cov_us0pfom87.s[140]++,await getBalance(sender));cov_us0pfom87.s[141]++;actualBalance=web3.utils.fromWei(actualBalance,"ether");cov_us0pfom87.s[142]++;return actualBalance;}cov_us0pfom87.s[143]++;module.exports={connectAcc,deployHTLC,verifyHTLC,resolveHTLC,waitForHTLC,refundHTLC};