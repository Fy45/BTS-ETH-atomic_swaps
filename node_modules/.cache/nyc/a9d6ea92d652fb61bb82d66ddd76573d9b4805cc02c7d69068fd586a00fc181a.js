var cov_2mnjdiivl0=function(){var path="/Users/fanyuan/KTH-ICT-TCOMM/Thesis/Analysis/BTS-ETH-atomic_swaps/src/ethForBts.js";var hash="bda0623eb22bf0e849ebfe78958d994a2f6a822d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/fanyuan/KTH-ICT-TCOMM/Thesis/Analysis/BTS-ETH-atomic_swaps/src/ethForBts.js",statementMap:{"0":{start:{line:1,column:12},end:{line:1,column:28}},"1":{start:{line:2,column:12},end:{line:2,column:28}},"2":{start:{line:3,column:15},end:{line:3,column:41}},"3":{start:{line:15,column:17},end:{line:15,column:110}},"4":{start:{line:16,column:16},end:{line:16,column:71}},"5":{start:{line:17,column:11},end:{line:19,column:3}},"6":{start:{line:20,column:20},end:{line:20,column:63}},"7":{start:{line:21,column:2},end:{line:21,column:58}},"8":{start:{line:22,column:23},end:{line:22,column:75}},"9":{start:{line:23,column:18},end:{line:23,column:66}},"10":{start:{line:24,column:18},end:{line:24,column:78}},"11":{start:{line:25,column:2},end:{line:27,column:4}},"12":{start:{line:28,column:18},end:{line:30,column:3}},"13":{start:{line:37,column:20},end:{line:45,column:3}},"14":{start:{line:46,column:2},end:{line:48,column:4}},"15":{start:{line:49,column:23},end:{line:49,column:68}},"16":{start:{line:55,column:20},end:{line:55,column:59}},"17":{start:{line:56,column:2},end:{line:56,column:29}},"18":{start:{line:57,column:24},end:{line:57,column:55}},"19":{start:{line:58,column:2},end:{line:60,column:3}},"20":{start:{line:59,column:4},end:{line:59,column:31}},"21":{start:{line:67,column:2},end:{line:67,column:76}},"22":{start:{line:68,column:2},end:{line:68,column:78}},"23":{start:{line:69,column:15},end:{line:69,column:33}},"24":{start:{line:70,column:2},end:{line:98,column:3}},"25":{start:{line:72,column:6},end:{line:72,column:64}},"26":{start:{line:74,column:6},end:{line:92,column:11}},"27":{start:{line:77,column:10},end:{line:77,column:56}},"28":{start:{line:78,column:25},end:{line:78,column:79}},"29":{start:{line:79,column:10},end:{line:79,column:30}},"30":{start:{line:82,column:10},end:{line:82,column:27}},"31":{start:{line:83,column:10},end:{line:83,column:42}},"32":{start:{line:84,column:26},end:{line:89,column:11}},"33":{start:{line:90,column:10},end:{line:90,column:77}},"34":{start:{line:91,column:10},end:{line:91,column:77}},"35":{start:{line:93,column:6},end:{line:93,column:12}},"36":{start:{line:96,column:6},end:{line:96,column:32}},"37":{start:{line:97,column:6},end:{line:97,column:12}},"38":{start:{line:101,column:0},end:{line:101,column:27}}},fnMap:{"0":{name:"ethForBts",decl:{start:{line:5,column:15},end:{line:5,column:24}},loc:{start:{line:5,column:27},end:{line:99,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:76,column:14},end:{line:76,column:15}},loc:{start:{line:76,column:37},end:{line:80,column:9}},line:76},"2":{name:"(anonymous_2)",decl:{start:{line:81,column:15},end:{line:81,column:16}},loc:{start:{line:81,column:35},end:{line:92,column:9}},line:81}},branchMap:{"0":{loc:{start:{line:58,column:2},end:{line:60,column:3}},type:"if",locations:[{start:{line:58,column:2},end:{line:60,column:3}},{start:{line:58,column:2},end:{line:60,column:3}}],line:58},"1":{loc:{start:{line:70,column:2},end:{line:98,column:3}},type:"switch",locations:[{start:{line:71,column:4},end:{line:93,column:12}},{start:{line:95,column:4},end:{line:97,column:12}}],line:70}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"bda0623eb22bf0e849ebfe78958d994a2f6a822d"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const bts=(cov_2mnjdiivl0.s[0]++,require("./bts"));const eth=(cov_2mnjdiivl0.s[1]++,require("./eth"));const prompt=(cov_2mnjdiivl0.s[2]++,require("./helper/prompt"));async function ethForBts(){cov_2mnjdiivl0.f[0]++;/*
   * configure the ETH party(both side)
   * in this case we require the receiver side specify address
   * the comment code is use for other user,
   * since it involves important values in MetaMask wallet
   * for now it's only test locally
   */let mnemonic=(cov_2mnjdiivl0.s[3]++,await prompt('Enter the secret mnemonics (12 words) to get access to your metamask wallet: '));let api_key=(cov_2mnjdiivl0.s[4]++,await prompt('Also specify your environment api_key: '));let id=(cov_2mnjdiivl0.s[5]++,await prompt("Enter your sender account id of ETH wallet(e.g. firstAcc is 0): "));const ethSender=(cov_2mnjdiivl0.s[6]++,await eth.connectAcc(mnemonic,api_key,id));cov_2mnjdiivl0.s[7]++;console.log(`Ropsten ETH wallet address  ${ethSender}`);const ethRecipient=(cov_2mnjdiivl0.s[8]++,await prompt("Enter ETH address to receive funds: "));let ethAmount=(cov_2mnjdiivl0.s[9]++,await prompt("Enter the ETH you want to send: "));let hash_lock=(cov_2mnjdiivl0.s[10]++,await prompt("Enter the hash_value you got from BTS side: "));cov_2mnjdiivl0.s[11]++;console.log("In order to protect your money, please lock the contract less time than BTS does...");let time_lock=(cov_2mnjdiivl0.s[12]++,await prompt("Enter the time you want to lock in contract (seconds): "));/*
   * selling ETH buying BTS,
   * generate the htlc contract on ETH side
   */const ethHtlcId=(cov_2mnjdiivl0.s[13]++,await eth.deployHTLC(mnemonic,api_key,ethSender,ethRecipient,hash_lock,time_lock,ethAmount));cov_2mnjdiivl0.s[14]++;console.log(`Please inform your counterparty with the ETH HTLC id ${ethHtlcId}`);const btsRecipient=(cov_2mnjdiivl0.s[15]++,await prompt("Enter your BTS account name: "));/*
   * Verify the contract
   * check both HashSecret to see if they are match
   */const btsHtlcId=(cov_2mnjdiivl0.s[16]++,await prompt("Enter the BTS HTLC id: "));cov_2mnjdiivl0.s[17]++;console.log("\nBTS HTLC:");const btsHashSecret=(cov_2mnjdiivl0.s[18]++,await bts.verifyHTLC(btsHtlcId));cov_2mnjdiivl0.s[19]++;if(btsHashSecret!==hash_lock){cov_2mnjdiivl0.b[0][0]++;cov_2mnjdiivl0.s[20]++;throw"Hashes don't match";}else{cov_2mnjdiivl0.b[0][1]++;}/*
   * Redeem the BTS contract
   * or refund ETH after time expires
   * transaction complete
   */cov_2mnjdiivl0.s[21]++;console.log(`\nIf details are correct then input yes to redeem your BTS`);cov_2mnjdiivl0.s[22]++;console.log(`Or else please enter exit and talk with your counter party: `);let answer=(cov_2mnjdiivl0.s[23]++,await prompt("> "));cov_2mnjdiivl0.s[24]++;switch(answer){case"yes":cov_2mnjdiivl0.b[1][0]++;cov_2mnjdiivl0.s[25]++;console.log("Waiting for ETH contract to be resolved...");// complete the transaction
cov_2mnjdiivl0.s[26]++;await eth.waitForHTLC(mnemonic,api_key,ethHtlcId).then(async function(secret){cov_2mnjdiivl0.f[1]++;cov_2mnjdiivl0.s[27]++;console.log("Resolving BTS HTLC contract...");const output=(cov_2mnjdiivl0.s[28]++,await bts.resolveHTLC(btsHtlcId,btsRecipient,secret));cov_2mnjdiivl0.s[29]++;console.log(output);}).catch(async function(err){cov_2mnjdiivl0.f[2]++;cov_2mnjdiivl0.s[30]++;console.log(err);cov_2mnjdiivl0.s[31]++;console.log("Refunding ETH...");const balance=(cov_2mnjdiivl0.s[32]++,await eth.refundHTLC(mnemonic,api_key,ethSender,ethHtlcId));cov_2mnjdiivl0.s[33]++;console.log("ETH HashTimelockContract was successfully refunded!");cov_2mnjdiivl0.s[34]++;console.log(`Account: ${ethSender} has balance of ${balance} ETH`);});cov_2mnjdiivl0.s[35]++;break;case"exit":cov_2mnjdiivl0.b[1][1]++;cov_2mnjdiivl0.s[36]++;console.log("Exiting...");cov_2mnjdiivl0.s[37]++;break;}}cov_2mnjdiivl0.s[38]++;module.exports=ethForBts;